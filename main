;	+----+----+----+
;	| 11 | 10 |  9 |	row3
;	+----+----+----+
;	|  8 |  7 |  6 |	row2
;	+----+----|----+
;	|  5 |  4 |  3 |	row1
;	+----+----+----+
;	|  2 |  1 |  0 |	row0
;	+----+----+----+
;	 col2 col1 col0

;|--------------------------------------------------------------------------------------|
;|linha 1 | 00 | 01 | 02 | 03 | 04 |05 | 06 | 07 | 08 | 09 |0A | 0B | 0C | 0D | 0E | 0F |
;|linha 2 | 40 | 41 | 42 | 43 | 44 |45 | 46 | 47 | 48 | 49 |4A | 4B | 4C | 4D | 4E | 4F |
;|--------------------------------------------------------------------------------------|

; 1 - ligar
; 2 - sensor de água
; 3 - sensor da cápsula
; 4 - café pequeno
; 5 - café médio
; 6 - café grande

org 0000h
	LJMP START

org 0030h

	START:
	; DEFINICAO DOS TEXTOS UTILIZADOS
	msgIniciarParte1: DB 'Pressione o', 0
	msgIniciarParte2: DB 'botao 1', 0
	msgTamanhoCafeParte1: DB 'Selecione o cafe', 0
	msgTamanhoCafeParte2: DB 'Tam: P-4 M-5 G-6', 0
	cafeSelecionado4: DB 'Fazendo cafe 4', 0
	cafeSelecionado5: DB 'Fazendo cafe 5', 0
	cafeSelecionado6: DB 'Fazendo cafe 6', 0
	
	; put data in RAM
	;	MOV 40H, #'#' 
	;	MOV 41H, #'0'
	;	MOV 42H, #'*'
	;	MOV 43H, #'9'
	;	MOV 44H, #'8'
	;	MOV 45H, #'7'
	;	MOV 46H, #'6'
	;	MOV 47H, #'5'
	;	MOV 48H, #'4'
	;	MOV 49H, #'3'
	;	MOV 4AH, #'2'
	;	MOV 4BH, #'1'
		LJMP MAIN

org #0100h

	MAIN:
		ACALL lcd_init
	  	ACALL iniciar
		ACALL menuSelecao
		MOV A, #6
	  	ACALL piscaLed
	  	SETB P1.7
	  	ACALL selecionaCafe
	
	iniciar:
		ACALL menuInicio
		ESPERAINICIAR:
		  	CLR F0
			ACALL leituraTeclado
			JNB F0, ROTINA   ;if F0 is clear, jump to ROTINA
		  	CJNE R0, #1, ESPERAINICIAR
		RET

	menuInicio:
		MOV A, #02h
		ACALL POSICIONACURSOR
		MOV DPTR,#msgIniciarParte1
		ACALL ESCREVESTRINGROM
		MOV A, #44h
		ACALL POSICIONACURSOR
		MOV DPTR,#msgIniciarParte2
		ACALL ESCREVESTRINGROM
		RET
	
	MENUSELECAO:
		MOV A, #00h
		ACALL POSICIONACURSOR
		MOV DPTR,#msgTamanhoCafeParte1
		ACALL ESCREVESTRINGROM
		MOV A, #40
		ACALL POSICIONACURSOR
		MOV DPTR,#msgTamanhoCafeParte2
		ACALL ESCREVESTRINGROM
		RET
		
	
	selecionaCafe:
	  	CLR F0
	  	ACALL leituraLinha2
	  	JNB F0, selecionaCafe
	  	CJNE R0, #4, verifica5

	verifica5:
		CJNE R0, #5, verifica6

	verifica6:
		CJNE R0, #6, selecionaCafe

	leituraLinha2:
		MOV R0, #0
	
		; scan row2
		SETB P0.1
		CLR P0.2
		CALL colScan
		JB F0, finish
	
	leituraTeclado:
		MOV R0, #0			; clear R0 - the first key is key0
	
		; scan row2
		SETB P0.1			; set row1
		CLR P0.2			; clear row2
		CALL colScan		; call column-scan subroutine
		JB F0, finish		; | if F0 is set, jump to end of program 
							; | (because the pressed key was found and its number is in  R0)
		; scan row3
		SETB P0.2			; set row2
		CLR P0.3			; clear row3
		CALL colScan		; call column-scan subroutine
		JB F0, finish		; | if F0 is set, jump to end of program 
							; | (because the pressed key was found and its number is in  R0)
	finish:
		RET
	
	; column-scan subroutine
	colScan:
		JNB P0.4, gotKey	; if col0 is cleared - key found
		INC R0				; otherwise move to next key
		JNB P0.5, gotKey	; if col1 is cleared - key found
		INC R0				; otherwise move to next key
		JNB P0.6, gotKey	; if col2 is cleared - key found
		INC R0				; otherwise move to next key
		RET					; return from subroutine - key not found
	gotKey:
		SETB F0				; key found - set F0
		RET					; and return from subroutine
	
	
	
	
	; initialise the display
	; see instruction set for details
	lcd_init:
	
		CLR RS		; clear RS - indicates that instructions are being sent to the module
	
	; function set	
		CLR P1.7		; |
		CLR P1.6		; |
		SETB P1.5		; |
		CLR P1.4		; | high nibble set
	
		SETB EN		; |
		CLR EN		; | negative edge on E
	
		CALL delay		; wait for BF to clear	
						; function set sent for first time - tells module to go into 4-bit mode
	; Why is function set high nibble sent twice? See 4-bit operation on pages 39 and 42 of HD44780.pdf.
	
		SETB EN		; |
		CLR EN		; | negative edge on E
						; same function set high nibble sent a second time
	
		SETB P1.7		; low nibble set (only P1.7 needed to be changed)
	
		SETB EN		; |
		CLR EN		; | negative edge on E
					; function set low nibble sent
		CALL delay		; wait for BF to clear
	
	
	; entry mode set
	; set to increment with no shift
		CLR P1.7		; |
		CLR P1.6		; |
		CLR P1.5		; |
		CLR P1.4		; | high nibble set
	
		SETB EN		; |
		CLR EN		; | negative edge on E
	
		SETB P1.6		; |
		SETB P1.5		; |low nibble set
	
		SETB EN		; |
		CLR EN		; | negative edge on E
	
		CALL delay		; wait for BF to clear
	
	
	; display on/off control
	; the display is turned on, the cursor is turned on and blinking is turned on
		CLR P1.7		; |
		CLR P1.6		; |
		CLR P1.5		; |
		CLR P1.4		; | high nibble set
	
		SETB EN		; |
		CLR EN		; | negative edge on E
	
		SETB P1.7		; |
		SETB P1.6		; |
		SETB P1.5		; |
		SETB P1.4		; | low nibble set
	
		SETB EN		; |
		CLR EN		; | negative edge on E
	
		CALL delay		; wait for BF to clear
		RET
	
	
	sendCharacter:
		SETB RS  		; setb RS - indicates that data is being sent to module
		MOV C, ACC.7		; |
		MOV P1.7, C			; |
		MOV C, ACC.6		; |
		MOV P1.6, C			; |
		MOV C, ACC.5		; |
		MOV P1.5, C			; |
		MOV C, ACC.4		; |
		MOV P1.4, C			; | high nibble set
	
		SETB EN			; |
		CLR EN			; | negative edge on E
	
		MOV C, ACC.3		; |
		MOV P1.7, C			; |
		MOV C, ACC.2		; |
		MOV P1.6, C			; |
		MOV C, ACC.1		; |
		MOV P1.5, C			; |
		MOV C, ACC.0		; |
		MOV P1.4, C			; | low nibble set
	
		SETB EN			; |
		CLR EN			; | negative edge on E
	
		CALL delay			; wait for BF to clear
		CALL delay			; wait for BF to clear
		RET
	posicionaCursor:
		CLR RS	
		SETB P1.7		    ; |
		MOV C, ACC.6		; |
		MOV P1.6, C			; |
		MOV C, ACC.5		; |
		MOV P1.5, C			; |
		MOV C, ACC.4		; |
		MOV P1.4, C			; | high nibble set
	
		SETB EN			; |
		CLR EN			; | negative edge on E
	
		MOV C, ACC.3		; |
		MOV P1.7, C			; |
		MOV C, ACC.2		; |
		MOV P1.6, C			; |
		MOV C, ACC.1		; |
		MOV P1.5, C			; |
		MOV C, ACC.0		; |
		MOV P1.4, C			; | low nibble set
	
		SETB EN			; |
		CLR EN			; | negative edge on E
	
		CALL delay			; wait for BF to clear
		CALL delay			; wait for BF to clear
		RET
	
	
	;Retorna o cursor para primeira posição sem limpar o display
	retornaCursor:
		CLR RS	
		CLR P1.7		; |
		CLR P1.6		; |
		CLR P1.5		; |
		CLR P1.4		; | high nibble set
	
		SETB EN		; |
		CLR EN		; | negative edge on E
	
		CLR P1.7		; |
		CLR P1.6		; |
		SETB P1.5		; |
		SETB P1.4		; | low nibble set
	
		SETB EN		; |
		CLR EN		; | negative edge on E
	
		CALL delay		; wait for BF to clear
		RET
	
	
	;Limpa o display
	clearDisplay:
		CLR RS	
		CLR P1.7		; |
		CLR P1.6		; |
		CLR P1.5		; |
		CLR P1.4		; | high nibble set
	
		SETB EN		; |
		CLR EN		; | negative edge on E
	
		CLR P1.7		; |
		CLR P1.6		; |
		CLR P1.5		; |
		SETB P1.4		; | low nibble set
	
		SETB EN		; |
		CLR EN		; | negative edge on E
	
		CALL delay		; wait for BF to clear
		RET
	
	
	delay:
		MOV R7, #50
		DJNZ R7, $
		RET
	
	
	; --- Mapeamento de Hardware (8051) ---
	    RS      equ     P1.3    ;Reg Select ligado em P1.3
	    EN      equ     P1.2    ;Enable ligado em P1.2
	
	
	org 0000h
		LJMP START
	
	org 0030h
	; put data in ROM
	SELECIONE:
		DB "Selecione o"
	  DB 00h ;Marca null no fim da String
	TAMANHO:
		DB "tamanho"
	  DB 00h ;Marca null no fim da String
	DISPLAY:
	  DB "Display LCD"
	  DB 00h ;Marca null no fim da String
	
	;MAIN
	org 0100h
	START:
	
	main:
		ACALL lcd_init
		MOV A, #06h
		ACALL posicionaCursor
		MOV DPTR,#FEI            ;endereço inicial de memória da String FEI
		ACALL escreveStringROM
		MOV A, #42h
	  ACALL posicionaCursor
		MOV DPTR,#DISPLAY            ;endereço inicial de memória da String Display LCD
	  ACALL escreveStringROM
		ACALL clearDisplay
		JMP main
	
	
	escreveStringROM:
	  MOV R1, #00h
		; Inicia a escrita da String no Display LCD
	loop:
	  MOV A, R1
		MOVC A,@A+DPTR 	 ;lê da memória de programa
		JZ finish		; if A is 0, then end of data has been reached - jump out of loop
		ACALL sendCharacter	; send data in A to LCD module
		INC R1			; point to next piece of data
	   MOV A, R1
		JMP loop		; repeat
	finish:
		RET
